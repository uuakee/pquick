generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int           @id @default(autoincrement())
  email    String        @unique
  password String
  segment  segmentMarket
  phone    String        @unique
  cnpj     String        @unique
  username String        @unique
  name     String
  address  String
  city     String
  state    String
  zip      String

  status UserStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallet Wallet?

  apiKeys  ApiKey[]
  Kyc      Kyc[]
  webhooks Webhook[]

  // Relações de transação
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")

  @@map("users")
}

model Webhook {
  id        Int         @id @default(autoincrement())
  type      WebhookType
  url       String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([userId, type])
}

enum WebhookType {
  QRCODE
  PAYMENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Wallet {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique // Garante que cada usuário tenha apenas uma wallet
  user              User     @relation(fields: [userId], references: [id])
  balance           Float    @default(0)
  blocked_balance   Float    @default(0)
  available_balance Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("wallets")
}

model ApiKey {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  client_id     String    @unique
  client_secret String
  status        KeyStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@map("api_keys")
}

model Kyc {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  document_type   DocumentType
  document_number String
  document_front  String
  document_back   String
  document_selfie String
  document_status KycStatus    @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([userId])
  @@map("kycs")
}

enum DocumentType {
  CPF
  CNPJ
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum KeyStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum segmentMarket {
  ECOMMERCE
  MARKETPLACE
  SAAS
  MARKETING
  FINANCE
  EDUCATION
  HEALTH
  ENTERTAINMENT
  IGAMING
  OTHER
}

model Transaction {
  id          Int               @id @default(autoincrement())
  amount      Float
  status      TransactionStatus @default(PENDING)
  type        TransactionType
  description String?

  senderId Int
  sender   User @relation("SentTransactions", fields: [senderId], references: [id])

  receiverId Int
  receiver   User @relation("ReceivedTransactions", fields: [receiverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum TransactionType {
  PAYMENT
  REFUND
  TRANSFER
  WITHDRAWAL
  DEPOSIT
}
